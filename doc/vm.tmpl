            +--------------------------+
            |          OS 211          |
            |  TASK 3: VIRTUAL MEMORY  |
            |      DESIGN DOCUMENT     |
            +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, or notes for the
>> markers, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

            PAGE TABLE/FRAME MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: (2 marks)
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration that relates to your supplemental page table and
>> frame table. Identify the purpose of each in roughly 25 words.

---- ALGORITHMS ----

>> A2: (2 marks)
>> Describe your code for locating the frame, if any, that contains
>> the data of a given page.

>> A3: (2 marks)
>> How have you implemented sharing of read only pages?

---- SYNCHRONIZATION ----

>> A4: (2 marks)
>> When two user processes both need a new frame at the same time,
>> how are races avoided? You should consider both when there are
>> and are not free frames available in memory.

---- RATIONALE ----

>> A5: (2 marks)
>> Why did you choose the data structure(s) that you did for
>> representing the page table and frame table?

               PAGING TO AND FROM DISK
               =======================

---- DATA STRUCTURES ----

>> B1: (1 mark)
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration that relates to your swap table.
>> Identify the purpose of each in roughly 25 words.

enum page_src
{
	SRC_SWAP,
	...
};

SRC_SWAP to indicate that the page is expected to be found in swap block.

union sup_page_info
{
	swap_idx_t swap_idx;	// for SRC_SWAP.
	...
};

swap_idx is used to identify the index at which the page is in the swap block

typedef uint32_t swap_idx_t;
swap_idx_t being type of uint32_t to be consistent with block_size() return value.

swap_idx_t swap_size;
This is the total number of pages that could be stored into swap block.

struct block* swap_device;
This is the actual device used to store pages evicted.

struct bitmap* used_map;
A bitmap to indicates which sectors are in use within the swap block.

---- ALGORITHMS ----

>> B2: (2 marks)
>> When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

When there is not any free frame, the function find_page_to_evict() traverse all
the allocated, installed, unpinned frames to find the one whose installed
user page has smallest "freshness" value, that is, the least recent touched page.

>> B3: (2 marks)
>> When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

When there is a swap between pages, the corresponding "sup_pt_elem" stored in
supplementary page table gets changed. The page stored to swap device has its
"page_src" changed to SRC_SWAP whereas the page loaded to memory has SRC_RAM,
and "sup_page_info", which is used to provide additional information, are changed
to corresponding "swap_idx" and "kpage"(kernel page that the user page is
installed to) respectively. The "frame_table_entry" then has its member "u_page_sup"
set to the corresponding "sup_pt_elem" of the page loaded into memory.

---- SYNCHRONIZATION ----

>> B4: (2 marks)
>> Explain how your VM synchronization design prevents deadlock.
>> (You may want to refer to the necessary conditions for deadlock.)

There is only one lock for frame table and supplementary page table, therefore
there is no chance that deadlock would occur. //todo

>> B5: (2 marks)
>> A page fault in process P can cause another process Q's frame
>> to be evicted. How do you ensure that Q cannot access or modify
>> the page during the eviction process?

The eviction process will clear the present bit of the page entry in the first
place, to make sure that rest of the operation finishes before the evicting page
gets accessed or modified again, because process Q will immediately page fault and
gets stuck when trying to acquire lock (ft_spt_lock) held by p.

>> B6: (2 marks)
>> A page fault in process P can cause another process Q's frame
>> to be evicted. How do you avoid a race between P evicting Q's
>> frame and Q faulting the page back in?

As mentioned above, when process Q page fault, it gets stuck when acquiring ft_spt_lock
which is held by process P until the eviction process finishes, therefore there
is no chance for the eviction process and load process happening at the same time.

>> B7: (2 marks)
>> Explain how you handle access to paged-out user pages that
>> occur during system calls.

During the system calls, the address will be examined by function
examine_user_addr(const void*), if the address turns out to be in one of the
user page, the function will look into the page_src of that page and swap it back
into memory if necessary, then the rest of system call continues to proceed.

---- RATIONALE ----

>> B8: (2 marks)
>> There is an obvious trade-off between parallelism and the complexity
>> of your synchronisation methods. Explain where your design falls
>> along this continuum and why you chose to design it this way.

//todo

             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: (1 mark)
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration that relates to your file mapping table.
>> Identify the purpose of each in roughly 25 words.

---- ALGORITHMS ----

>> C2: (3 marks)
>> Explain how you determine whether a new file mapping overlaps with
>> any existing segment. How might this interact with stack growth?

---- RATIONALE ----

>> C4: (1 mark)
>> Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables. How does your codebase take
>> advantage of this?

             +-------------------------+
             |         OS 211          |
             |  TASK 2: USER PROGRAMS  |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, or notes for the
>> markers, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: (1 mark)
>> Copy here the declaration of each new or changed `struct' or `struct' member,
>> global or static variable, `typedef', or enumeration. Identify the purpose of
>> each in roughly 25 words.

in struct thread in thread.h

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
    proc_arg* argPage;    /* Kernel page to store argument, only used for process thread*/
    struct thread* parent;     /* The thread that creates it, can be itself for main*/
    struct thread* child_waiting;
    /*when thread is waiting in process_wait, it is the thread it is waiting for
      or else it is NULL*/
    int exit_code; /*when the thread it waits terminates, put exit code here*/
    /*or when creating process, recieve error code if initialization fails*/
#endif

---- ALGORITHMS ----

>> A2: (2 marks)
>> How does your argument parsing code avoid overflowing the stack page?
>> What are the efficiency considerations of your approach?

I have created a new page for holding the argument, with maximum buffer length being setted.
If the argument is too long, process_execute will return TID_ERR.
The allocation of page may be slow, however, it is acceptable.
I have copied and parse the string from given argument to the page created using parse_args,
which is O(n)



---- RATIONALE ----

>> A3: (3 marks)
>> Why does Pintos implement strtok_r() but not strtok()?
strtok_r uses saveptr to maintain the state of a specific tokenizing operations.
Since Pintos is a concurrent operating system, when executing a serial of strtok(), it may be interrupted, and at the same time another serial of strtok() in another thread will be executed. Therefore, if we use strtok, which does not have any way to maintain the calling state, the state may be corrupted and strtok operation will be erromatic, because strtok() assumes that the serial of operations is serialized. By using strtok_r, which has way to identify the state by 3rd argument, the concurency is not a problem any more.

>> A4: (2 marks)
>> In Pintos, the kernel separates commands into a executable name and arguments.
>> In Unix-like systems, the shell does this separation.
>> Identify two advantages of the Unix approach.
1. More secure
	If there is any bugs such as security vunerabilities in parsing operation, what will be corrupted or hacked is shell process, which is a user process. However, if this is done by kernel, kernel will be corrupted, and the privilige of code execution is higher for attacker, which is much more dangerous.
2. faster
	In kernel, SIMD instruction set is hardly used. However, in user process, SIMD is used to speed up operations that process continuous multiple datas, including string operations like tokenizing. Therefore, putting tokenizing into ring 3 is faster than into ring 0.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: (6 marks)
>> Copy here the declaration of each new or changed `struct' or `struct' member,
>> global or static variable, `typedef', or enumeration. Identify the purpose of
>> each in roughly 25 words.

typedef struct _proc_arg
{
	int argc;
	char* arr_to_args[MAX_NUM_OF_ARGS];
	char args[MAX_LEN_OF_BUFFER];
}proc_arg;
/*sizeof (proc_arg) == 4096, which occupies excacly one page
This struct is contains the parsed arguments*/

typedef struct _start_stack_frame
{
	void (*eip) (void);
	int argc;
	char **argv;
}start_stack_frame;
/*This struct is the stack frame of _start function
argc and argv will be passed into main
eip, return address of the function, is not used, since exit is called
*/

typedef uint32_t arg_t;
represent the argument being passed from 'int 0x30'
it can be ID of system call, or argument being passed
it is used when fetching information from user stack

---- ALGORITHMS ----

>> B2: (2 marks)
>> Describe how your code ensures safe memory access of user provided data from
>> within the kernel.
inline arg_t access_user_arg_t(arg_t* addr)
{
	if ((void*)addr > PHYS_BASE - sizeof(arg_t))
	{//if addr will access anything in kernel, terminate with -1
		exit(EXIT_ERROR);
	}
	return *addr;//if unmapped, this will interrupt to page_fault
}
In addition, in page_fault function

  exit(EXIT_ERROR);

will be called, to terminate the thread.
Also, any invalid access of memory in user program will also cause this handler be called.

>> B3: (3 marks)
>> Suppose that we choose to verify user provided pointers by validating them
>> before use (i.e. using the first method described in the spec).
>> What is the least and the greatest possible number of inspections of the page
>> table (e.g. calls to pagedir_get_page()) that would need to be made in the
>> following cases?
>> a) A system call that passes the kernel a pointer to 10 bytes of user data.

Max: 2, since the 10 bytes may cross 2 page
Min: 1, 10 bytes are in 1 page

>> b) A system call that passes the kernel a pointer to a full page
>>    (4,096 bytes) of user data.

Max: 2, also cross 2 page
Min: 1, occupies exactly 1 page

>> c) A system call that passes the kernel a pointer to 4 full pages
>>    (16,384 bytes) of user data.

Max: 5, cross 5 pages
Min: 4, occupies exactly 4 pages

>> You should briefly explain your checking tactic and how it applies to each
>> case to generate your answers.
examine page of base addr (%0x1000)
examine page of base_addr + num_of_bytes - 1 (%1000)
if there is any invalid access to kernel memory
or there is any overflow when calculating last bytes
	mark as invalid access
traverse any page between and including these two pages, check that they are mapped
if there is any page not being mapped
	mark as invalid access

>> B4: (2 marks)
>> How do you keep the purpose of your user memory verification code clear and
>> avoid obscuring the primary function of code in a morass of error-handling?
>> Additionally, when an error is detected, how do you ensure that all
>> temporarily allocated resources (locks, buffers, etc.) are freed?

>> B5: (8 marks)
>> Describe your implementation of the "wait" system call and how it interacts
>> with process termination for both the parent and child.

---- SYNCHRONIZATION ----

>> B6: (2 marks)
>> The "exec" system call returns -1 if loading the new executable fails, so it
>> cannot return before the new executable has completed loading. How does your
>> code ensure this? How is the load success/failure status passed back to the
>> thread that calls "exec"?

>> B7: (5 marks)
>> Consider parent process P with child process C.
>> How do you ensure proper synchronization and avoid race conditions when:
>>   i) P calls wait(C) before or C exits?
>>  ii) P calls wait(C) after C exits?
>> iii) P terminates, without waiting, before C exists?
>>  iv) P terminates, without waiting, after C exists?
>> Additionally, how do you ensure that all resources are freed regardless of
>> the above case?

---- RATIONALE ----

>> B8: (2 marks)
>> Why did you choose to implement safe access of user memory from the kernel in
>> the way that you did?

>> B9: (2 marks)
>> What advantages or disadvantages can you see to your design for file
>> descriptors?